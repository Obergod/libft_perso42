avr_string(3avr)                               avr-libc                              avr_string(3avr)

NNAAMMEE
       avr_string - <string.h>: Strings

SSYYNNOOPPSSIISS
   MMaaccrrooss
       #define __FFFFSS(x)

   FFuunnccttiioonnss
       int ffffss (int __val)
       int ffffssll (long __val)
       __extension__ int ffffssllll (long long __val)
       void * mmeemmccccppyy (void *, const void *, int, size_t)
       void * mmeemmcchhrr (const void *, int, size_t) __ATTR_PURE__
       int mmeemmccmmpp (const void *, const void *, size_t) __ATTR_PURE__
       void * mmeemmccppyy (void *, const void *, size_t)
       void * mmeemmmmeemm (const void *, size_t, const void *, size_t) __ATTR_PURE__
       void * mmeemmmmoovvee (void *, const void *, size_t)
       void * mmeemmrrcchhrr (const void *, int, size_t) __ATTR_PURE__
       void * mmeemmsseett (void *, int, size_t)
       char * ssttrrccaatt (char *, const char *)
       char * ssttrrcchhrr (const char *, int) __ATTR_PURE__
       char * ssttrrcchhrrnnuull (const char *, int) __ATTR_PURE__
       int ssttrrccmmpp (const char *, const char *) __ATTR_PURE__
       char * ssttrrccppyy (char *, const char *)
       int ssttrrccaasseeccmmpp (const char *, const char *) __ATTR_PURE__
       char * ssttrrccaasseessttrr (const char *, const char *) __ATTR_PURE__
       size_t ssttrrccssppnn (const char *__s, const char *__reject) __ATTR_PURE__
       char * ssttrrdduupp (const char *s1)
       size_t ssttrrllccaatt (char *, const char *, size_t)
       size_t ssttrrllccppyy (char *, const char *, size_t)
       size_t ssttrrlleenn (const char *) __ATTR_PURE__
       char * ssttrrllwwrr (char *)
       char * ssttrrnnccaatt (char *, const char *, size_t)
       int ssttrrnnccmmpp (const char *, const char *, size_t) __ATTR_PURE__
       char * ssttrrnnccppyy (char *, const char *, size_t)
       int ssttrrnnccaasseeccmmpp (const char *, const char *, size_t) __ATTR_PURE__
       size_t ssttrrnnlleenn (const char *, size_t) __ATTR_PURE__
       char * ssttrrppbbrrkk (const char *__s, const char *__accept) __ATTR_PURE__
       char * ssttrrrrcchhrr (const char *, int) __ATTR_PURE__
       char * ssttrrrreevv (char *)
       char * ssttrrsseepp (char **, const char *)
       size_t ssttrrssppnn (const char *__s, const char *__accept) __ATTR_PURE__
       char * ssttrrssttrr (const char *, const char *) __ATTR_PURE__
       char * ssttrrttookk (char *, const char *)
       char * ssttrrttookk__rr (char *, const char *, char **)
       char * ssttrruupprr (char *)

DDeettaaiilleedd DDeessccrriippttiioonn
       #include <string.h>

       The string functions perform string operations on NULL terminated strings.

       NNoottee
           If the strings you are working on resident in program space (flash), you will need to use
           the string functions described in <<aavvrr//ppggmmssppaaccee..hh>>:: PPrrooggrraamm SSppaaccee UUttiilliittiieess.

MMaaccrroo DDeeffiinniittiioonn DDooccuummeennttaattiioonn
   ##ddeeffiinnee __FFFFSS((xx))
       This macro finds the first (least significant) bit set in the input value.

       This macro is very similar to the function ffffss(()) except that it evaluates its argument at
       compile-time, so it should only be applied to compile-time constant expressions where it will
       reduce to a constant itself. Application of this macro to expressions that are not constant at
       compile-time is not recommended, and might result in a huge amount of code generated.

       RReettuurrnnss
           The __FFFFSS(()) macro returns the position of the first (least significant) bit set in the word
           val, or 0 if no bits are set. The least significant bit is position 1. Only 16 bits of
           argument are evaluted.

FFuunnccttiioonn DDooccuummeennttaattiioonn
   iinntt ffffss ((iinntt vvaall))
       This function finds the first (least significant) bit set in the input value.

       RReettuurrnnss
           The ffffss(()) function returns the position of the first (least significant) bit set in the
           word val, or 0 if no bits are set. The least significant bit is position 1.

       NNoottee
           For expressions that are constant at compile time, consider using the __FFFFSS macro instead.

   iinntt ffffssll ((lloonngg ____vvaall))
       Same as ffffss(()), for an argument of type long.

   iinntt ffffssllll ((lloonngg lloonngg ____vvaall))
       Same as ffffss(()), for an argument of type long long.

   vvooiidd ** mmeemmccccppyy ((vvooiidd ** ddeesstt,, ccoonnsstt vvooiidd ** ssrrcc,, iinntt vvaall,, ssiizzee__tt lleenn))
       Copy memory area. The mmeemmccccppyy(()) function copies no more than len bytes from memory area src to
       memory area dest, stopping when the character val is found.

       RReettuurrnnss
           The mmeemmccccppyy(()) function returns a pointer to the next character in dest after val, or NULL
           if val was not found in the first len characters of src.

   vvooiidd ** mmeemmcchhrr ((ccoonnsstt vvooiidd ** ssrrcc,, iinntt vvaall,, ssiizzee__tt lleenn))
       Scan memory for a character. The mmeemmcchhrr(()) function scans the first len bytes of the memory
       area pointed to by src for the character val. The first byte to match val (interpreted as an
       unsigned character) stops the operation.

       RReettuurrnnss
           The mmeemmcchhrr(()) function returns a pointer to the matching byte or NULL if the character does
           not occur in the given memory area.

   iinntt mmeemmccmmpp ((ccoonnsstt vvooiidd ** ss11,, ccoonnsstt vvooiidd ** ss22,, ssiizzee__tt lleenn))
       Compare memory areas. The mmeemmccmmpp(()) function compares the first len bytes of the memory areas
       s1 and s2. The comparision is performed using unsigned char operations.

       RReettuurrnnss
           The mmeemmccmmpp(()) function returns an integer less than, equal to, or greater than zero if the
           first len bytes of s1 is found, respectively, to be less than, to match, or be greater
           than the first len bytes of s2.

       NNoottee
           Be sure to store the result in a 16 bit variable since you may get incorrect results if
           you use an unsigned char or char due to truncation.

       WWaarrnniinngg
           This function is not -mint8 compatible, although if you only care about testing for
           equality, this function should be safe to use.

   vvooiidd ** mmeemmccppyy ((vvooiidd ** ddeesstt,, ccoonnsstt vvooiidd ** ssrrcc,, ssiizzee__tt lleenn))
       Copy a memory area. The mmeemmccppyy(()) function copies len bytes from memory area src to memory area
       dest. The memory areas may not overlap. Use mmeemmmmoovvee(()) if the memory areas do overlap.

       RReettuurrnnss
           The mmeemmccppyy(()) function returns a pointer to dest.

   vvooiidd ** mmeemmmmeemm ((ccoonnsstt vvooiidd ** ss11,, ssiizzee__tt lleenn11,, ccoonnsstt vvooiidd ** ss22,, ssiizzee__tt lleenn22))
       The mmeemmmmeemm(()) function finds the start of the first occurrence of the substring s2 of length
       len2 in the memory area s1 of length len1.

       RReettuurrnnss
           The mmeemmmmeemm(()) function returns a pointer to the beginning of the substring, or NULL if the
           substring is not found. If len2 is zero, the function returns s1.

   vvooiidd ** mmeemmmmoovvee ((vvooiidd ** ddeesstt,, ccoonnsstt vvooiidd ** ssrrcc,, ssiizzee__tt lleenn))
       Copy memory area. The mmeemmmmoovvee(()) function copies len bytes from memory area src to memory area
       dest. The memory areas may overlap.

       RReettuurrnnss
           The mmeemmmmoovvee(()) function returns a pointer to dest.

   vvooiidd ** mmeemmrrcchhrr ((ccoonnsstt vvooiidd ** ssrrcc,, iinntt vvaall,, ssiizzee__tt lleenn))
       The mmeemmrrcchhrr(()) function is like the mmeemmcchhrr(()) function, except that it searches backwards from
       the end of the len bytes pointed to by src instead of forwards from the front. (Glibc, GNU
       extension.)

       RReettuurrnnss
           The mmeemmrrcchhrr(()) function returns a pointer to the matching byte or NULL if the character
           does not occur in the given memory area.

   vvooiidd ** mmeemmsseett ((vvooiidd ** ddeesstt,, iinntt vvaall,, ssiizzee__tt lleenn))
       Fill memory with a constant byte. The mmeemmsseett(()) function fills the first len bytes of the
       memory area pointed to by dest with the constant byte val.

       RReettuurrnnss
           The mmeemmsseett(()) function returns a pointer to the memory area dest.

   iinntt ssttrrccaasseeccmmpp ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22))
       Compare two strings ignoring case. The ssttrrccaasseeccmmpp(()) function compares the two strings s1 and
       s2, ignoring the case of the characters.

       RReettuurrnnss
           The ssttrrccaasseeccmmpp(()) function returns an integer less than, equal to, or greater than zero if
           s1 is found, respectively, to be less than, to match, or be greater than s2. A consequence
           of the ordering used by ssttrrccaasseeccmmpp(()) is that if s1 is an initial substring of s2, then s1
           is considered to be 'less than' s2.

   cchhaarr ** ssttrrccaasseessttrr ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22))
       The ssttrrccaasseessttrr(()) function finds the first occurrence of the substring s2 in the string s1.
       This is like ssttrrssttrr(()), except that it ignores case of alphabetic symbols in searching for the
       substring. (Glibc, GNU extension.)

       RReettuurrnnss
           The ssttrrccaasseessttrr(()) function returns a pointer to the beginning of the substring, or NULL if
           the substring is not found. If s2 points to a string of zero length, the function returns
           s1.

   cchhaarr ** ssttrrccaatt ((cchhaarr ** ddeesstt,, ccoonnsstt cchhaarr ** ssrrcc))
       Concatenate two strings. The ssttrrccaatt(()) function appends the src string to the dest string
       overwriting the '\0' character at the end of dest, and then adds a terminating '\0' character.
       The strings may not overlap, and the dest string must have enough space for the result.

       RReettuurrnnss
           The ssttrrccaatt(()) function returns a pointer to the resulting string dest.

   cchhaarr ** ssttrrcchhrr ((ccoonnsstt cchhaarr ** ssrrcc,, iinntt vvaall))
       Locate character in string. The ssttrrcchhrr(()) function returns a pointer to the first occurrence of
       the character val in the string src.

       Here 'character' means 'byte' - these functions do not work with wide or multi-byte
       characters.

       RReettuurrnnss
           The ssttrrcchhrr(()) function returns a pointer to the matched character or NULL if the character
           is not found.

   cchhaarr ** ssttrrcchhrrnnuull ((ccoonnsstt cchhaarr ** ss,, iinntt cc))
       The ssttrrcchhrrnnuull(()) function is like ssttrrcchhrr(()) except that if c is not found in s, then it returns
       a pointer to the null byte at the end of s, rather than NULL. (Glibc, GNU extension.)

       RReettuurrnnss
           The ssttrrcchhrrnnuull(()) function returns a pointer to the matched character, or a pointer to the
           null byte at the end of s (i.e., s+strlen(s)) if the character is not found.

   iinntt ssttrrccmmpp ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22))
       Compare two strings. The ssttrrccmmpp(()) function compares the two strings s1 and s2.

       RReettuurrnnss
           The ssttrrccmmpp(()) function returns an integer less than, equal to, or greater than zero if s1
           is found, respectively, to be less than, to match, or be greater than s2. A consequence of
           the ordering used by ssttrrccmmpp(()) is that if s1 is an initial substring of s2, then s1 is
           considered to be 'less than' s2.

   cchhaarr ** ssttrrccppyy ((cchhaarr ** ddeesstt,, ccoonnsstt cchhaarr ** ssrrcc))
       Copy a string. The ssttrrccppyy(()) function copies the string pointed to by src (including the
       terminating '\0' character) to the array pointed to by dest. The strings may not overlap, and
       the destination string dest must be large enough to receive the copy.

       RReettuurrnnss
           The ssttrrccppyy(()) function returns a pointer to the destination string dest.

       NNoottee
           If the destination string of a ssttrrccppyy(()) is not large enough (that is, if the programmer
           was stupid/lazy, and failed to check the size before copying) then anything might happen.
           Overflowing fixed length strings is a favourite cracker technique.

   ssiizzee__tt ssttrrccssppnn ((ccoonnsstt cchhaarr ** ss,, ccoonnsstt cchhaarr ** rreejjeecctt))
       The ssttrrccssppnn(()) function calculates the length of the initial segment of s which consists
       entirely of characters not in reject.

       RReettuurrnnss
           The ssttrrccssppnn(()) function returns the number of characters in the initial segment of s which
           are not in the string reject. The terminating zero is not considered as a part of string.

   cchhaarr ** ssttrrdduupp ((ccoonnsstt cchhaarr ** ss11))
       Duplicate a string. The ssttrrdduupp(()) function allocates memory and copies into it the string
       addressed by s1, including the terminating null character.

       WWaarrnniinngg
           The ssttrrdduupp(()) function calls mmaalllloocc(()) to allocate the memory for the duplicated string! The
           user is responsible for freeing the memory by calling ffrreeee(()).

       RReettuurrnnss
           The ssttrrdduupp(()) function returns a pointer to the resulting string dest. If mmaalllloocc(()) cannot
           allocate enough storage for the string, ssttrrdduupp(()) will return NULL.

       WWaarrnniinngg
           Be sure to check the return value of the ssttrrdduupp(()) function to make sure that the function
           has succeeded in allocating the memory!

   ssiizzee__tt ssttrrllccaatt ((cchhaarr ** ddsstt,, ccoonnsstt cchhaarr ** ssrrcc,, ssiizzee__tt ssiizz))
       Concatenate two strings. Appends src to string dst of size siz (unlike ssttrrnnccaatt(()), siz is the
       full size of dst, not space left). At most siz-1 characters will be copied. Always NULL
       terminates (unless siz <= strlen(dst)).

       RReettuurrnnss
           The ssttrrllccaatt(()) function returns strlen(src) + MIN(siz, strlen(initial dst)). If retval >=
           siz, truncation occurred.

       Appends src to string dst of size siz (unlike ssttrrnnccaatt(()), siz is the full size of dst, not
       space left). At most siz-1 characters will be copied. Always NULL terminates (unless siz <=
       strlen(dst)).

       RReettuurrnnss
           The ssttrrllccaatt(()) function returns strlen(src) + MIN(siz, strlen(initial dst)). If retval >=
           siz, truncation occurred.

   ssiizzee__tt ssttrrllccppyy ((cchhaarr ** ddsstt,, ccoonnsstt cchhaarr ** ssrrcc,, ssiizzee__tt ssiizz))
       Copy a string. Copy src to string dst of size siz. At most siz-1 characters will be copied.
       Always NULL terminates (unless siz == 0).

       RReettuurrnnss
           The ssttrrllccppyy(()) function returns strlen(src). If retval >= siz, truncation occurred.

       Copy src to string dst of size siz. At most siz-1 characters will be copied. Always NULL
       terminates (unless siz == 0).

       RReettuurrnnss
           The ssttrrllccppyy(()) function returns strlen(src). If retval >= siz, truncation occurred.

   ssiizzee__tt ssttrrlleenn ((ccoonnsstt cchhaarr ** ssrrcc))
       Calculate the length of a string. The ssttrrlleenn(()) function calculates the length of the string
       src, not including the terminating '\0' character.

       RReettuurrnnss
           The ssttrrlleenn(()) function returns the number of characters in src.

   cchhaarr ** ssttrrllwwrr ((cchhaarr ** ss))
       Convert a string to lower case. The ssttrrllwwrr(()) function will convert a string to lower case.
       Only the upper case alphabetic characters [A .. Z] are converted. Non-alphabetic characters
       will not be changed.

       RReettuurrnnss
           The ssttrrllwwrr(()) function returns a pointer to the converted string.

   iinntt ssttrrnnccaasseeccmmpp ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22,, ssiizzee__tt lleenn))
       Compare two strings ignoring case. The ssttrrnnccaasseeccmmpp(()) function is similar to ssttrrccaasseeccmmpp(()),
       except it only compares the first len characters of s1.

       RReettuurrnnss
           The ssttrrnnccaasseeccmmpp(()) function returns an integer less than, equal to, or greater than zero if
           s1 (or the first len bytes thereof) is found, respectively, to be less than, to match, or
           be greater than s2. A consequence of the ordering used by ssttrrnnccaasseeccmmpp(()) is that if s1 is
           an initial substring of s2, then s1 is considered to be 'less than' s2.

   cchhaarr ** ssttrrnnccaatt ((cchhaarr ** ddeesstt,, ccoonnsstt cchhaarr ** ssrrcc,, ssiizzee__tt lleenn))
       Concatenate two strings. The ssttrrnnccaatt(()) function is similar to ssttrrccaatt(()), except that only the
       first n characters of src are appended to dest.

       RReettuurrnnss
           The ssttrrnnccaatt(()) function returns a pointer to the resulting string dest.

   iinntt ssttrrnnccmmpp ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22,, ssiizzee__tt lleenn))
       Compare two strings. The ssttrrnnccmmpp(()) function is similar to ssttrrccmmpp(()), except it only compares
       the first (at most) n characters of s1 and s2.

       RReettuurrnnss
           The ssttrrnnccmmpp(()) function returns an integer less than, equal to, or greater than zero if s1
           (or the first n bytes thereof) is found, respectively, to be less than, to match, or be
           greater than s2.

   cchhaarr ** ssttrrnnccppyy ((cchhaarr ** ddeesstt,, ccoonnsstt cchhaarr ** ssrrcc,, ssiizzee__tt lleenn))
       Copy a string. The ssttrrnnccppyy(()) function is similar to ssttrrccppyy(()), except that not more than n
       bytes of src are copied. Thus, if there is no null byte among the first n bytes of src, the
       result will not be null-terminated.

       In the case where the length of src is less than that of n, the remainder of dest will be
       padded with nulls.

       RReettuurrnnss
           The ssttrrnnccppyy(()) function returns a pointer to the destination string dest.

   ssiizzee__tt ssttrrnnlleenn ((ccoonnsstt cchhaarr ** ssrrcc,, ssiizzee__tt lleenn))
       Determine the length of a fixed-size string. The strnlen function returns the number of
       characters in the string pointed to by src, not including the terminating '\0' character, but
       at most len. In doing this, strnlen looks only at the first len characters at src and never
       beyond src+len.

       RReettuurrnnss
           The strnlen function returns strlen(src), if that is less than len, or len if there is no
           '\0' character among the first len characters pointed to by src.

   cchhaarr ** ssttrrppbbrrkk ((ccoonnsstt cchhaarr ** ss,, ccoonnsstt cchhaarr ** aacccceepptt))
       The ssttrrppbbrrkk(()) function locates the first occurrence in the string s of any of the characters
       in the string accept.

       RReettuurrnnss
           The ssttrrppbbrrkk(()) function returns a pointer to the character in s that matches one of the
           characters in accept, or NULL if no such character is found. The terminating zero is not
           considered as a part of string: if one or both args are empty, the result will be NULL.

   cchhaarr ** ssttrrrrcchhrr ((ccoonnsstt cchhaarr ** ssrrcc,, iinntt vvaall))
       Locate character in string. The ssttrrrrcchhrr(()) function returns a pointer to the last occurrence of
       the character val in the string src.

       Here 'character' means 'byte' - these functions do not work with wide or multi-byte
       characters.

       RReettuurrnnss
           The ssttrrrrcchhrr(()) function returns a pointer to the matched character or NULL if the character
           is not found.

   cchhaarr ** ssttrrrreevv ((cchhaarr ** ss))
       Reverse a string. The ssttrrrreevv(()) function reverses the order of the string.

       RReettuurrnnss
           The ssttrrrreevv(()) function returns a pointer to the beginning of the reversed string.

   cchhaarr ** ssttrrsseepp ((cchhaarr **** sspp,, ccoonnsstt cchhaarr ** ddeelliimm))
       Parse a string into tokens. The ssttrrsseepp(()) function locates, in the string referenced by *sp,
       the first occurrence of any character in the string delim (or the terminating '\0' character)
       and replaces it with a '\0'. The location of the next character after the delimiter character
       (or NULL, if the end of the string was reached) is stored in *sp. An ``empty'' field, i.e. one
       caused by two adjacent delimiter characters, can be detected by comparing the location
       referenced by the pointer returned in *sp to '\0'.

       RReettuurrnnss
           The ssttrrsseepp(()) function returns a pointer to the original value of *sp. If *sp is initially
           NULL, ssttrrsseepp(()) returns NULL.

   ssiizzee__tt ssttrrssppnn ((ccoonnsstt cchhaarr ** ss,, ccoonnsstt cchhaarr ** aacccceepptt))
       The ssttrrssppnn(()) function calculates the length of the initial segment of s which consists
       entirely of characters in accept.

       RReettuurrnnss
           The ssttrrssppnn(()) function returns the number of characters in the initial segment of s which
           consist only of characters from accept. The terminating zero is not considered as a part
           of string.

   cchhaarr ** ssttrrssttrr ((ccoonnsstt cchhaarr ** ss11,, ccoonnsstt cchhaarr ** ss22))
       Locate a substring. The ssttrrssttrr(()) function finds the first occurrence of the substring s2 in
       the string s1. The terminating '\0' characters are not compared.

       RReettuurrnnss
           The ssttrrssttrr(()) function returns a pointer to the beginning of the substring, or NULL if the
           substring is not found. If s2 points to a string of zero length, the function returns s1.

   cchhaarr ** ssttrrttookk ((cchhaarr ** ss,, ccoonnsstt cchhaarr ** ddeelliimm))
       Parses the string s into tokens. strtok parses the string s into tokens. The first call to
       strtok should have s as its first argument. Subsequent calls should have the first argument
       set to NULL. If a token ends with a delimiter, this delimiting character is overwritten with a
       '\0' and a pointer to the next character is saved for the next call to strtok. The delimiter
       string delim may be different for each call.

       RReettuurrnnss
           The ssttrrttookk(()) function returns a pointer to the next token or NULL when no more tokens are
           found.

       NNoottee
           ssttrrttookk(()) is NOT reentrant. For a reentrant version of this function see ssttrrttookk__rr(())..

   cchhaarr ** ssttrrttookk__rr ((cchhaarr ** ssttrriinngg,, ccoonnsstt cchhaarr ** ddeelliimm,, cchhaarr **** llaasstt))
       Parses string into tokens. strtok_r parses string into tokens. The first call to strtok_r
       should have string as its first argument. Subsequent calls should have the first argument set
       to NULL. If a token ends with a delimiter, this delimiting character is overwritten with a
       '\0' and a pointer to the next character is saved for the next call to strtok_r. The delimiter
       string delim may be different for each call. last is a user allocated char* pointer. It must
       be the same while parsing the same string. strtok_r is a reentrant version of ssttrrttookk(()).

       RReettuurrnnss
           The ssttrrttookk__rr(()) function returns a pointer to the next token or NULL when no more tokens
           are found.

   cchhaarr ** ssttrruupprr ((cchhaarr ** ss))
       Convert a string to upper case. The ssttrruupprr(()) function will convert a string to upper case.
       Only the lower case alphabetic characters [a .. z] are converted. Non-alphabetic characters
       will not be changed.

       RReettuurrnnss
           The ssttrruupprr(()) function returns a pointer to the converted string. The pointer is the same
           as that passed in since the operation is perform in place.

AAuutthhoorr
       Generated automatically by Doxygen for avr-libc from the source code.

Version 2.0.0                               Fri Jan 7 2022                           avr_string(3avr)
